; #ASCII VERSION FOR DOCUMENTATION PURPOSES
; #BlitzBasic2 - Amiga Midi Get File To RAM - by Sebastian I. Hartmann 6-2025
; based on code by Claude Heiland-Allen, mathr.co.uk/amiga/midi-file-transfer/
; Written on A1200 with Blizzard 1230 IV 030
;
;------------------ it is a beautiful day, and then you die ------------------
;
; this requires a python 3.0 script that i designed using chatgpt4-o.
; it should have been delivered with the archive. you will need a midi-
; out cable from your "computer" to the midi-in of your Amiga Midi Interface
;
;------------------- how to use: ---------------------------------------------
;
; set up your Midi cable connection: only pc-out --> amiga-in is needed
; 1. run Amiga Midi Get File on your amiga and see that it expects data
; 2. drag and drop your payload onto the python script on the PC
; 3. data will be transmitted. be very patient.
; 4. when transfer is complete, copy File from AMIGA ram to desired location.
;
;-----------------------------------------------------------------------------
;
; if you reenable any debug functions, make sure to noticeably increase wait times
; on the python script. also do so, if you run this bb2 with debugger=ON
;
; i don`t fashioncode, i am just old-school, lazy and stubborn
; if you don`t like it - don`t use it.
; If you use it, do so at your own risk! Files in ramdisk will be overwritten
; without asking! If you do unexpected stuff, unexpected stuff will happen!
;
; DISCLAIMER:
; !!!----- this is experimental software, use at your own risk! -----!!!
;
;=============================================================================

;Setup Screen
      WBStartup
      WbToScreen 0
      Window 1,1,1,600,240,$1004,"MIDI GET FILE V0.2-8-2 (c) Sebastian I. Hartmann 6-2025 - LMB TO END ",0,1
      Use Window 1

      ;Open Midi Port : variable.l = Openserial ("device name", #unit, #Baud, BIN_int_IO-Serflags )
      ; Openserial : serial.device
      ; Device Number: 0 in this case is Port 0, Channel 1
      ; Baud: 31250 is the Midi standard, fixed baud rate.
      ; #serf_xdisable=128    ;0100 0000 ;disable xon/xoff
      ; #serf_eofmode=64      ;0010 0000 ;enable eof checking
      ; #serf_shared=32       ;0001 0000 ;set it if you don`t need exclusive use of the port
      ; #serf_rad_boogie=16   ;0000 1000 ;high speed mode
      ; #serf_queuedbrk=8     ;0000 0100 ;if set, a break command waits for buffer empty
      ; #serf_parity_odd=2    ;0000 0010 ;select odd parity (even if not set)
      ; #serf_praity_on=1     ;0000 0001 ;enable parity checking

      ser.l = OpenSerial("serial.device", 0, 31250, 144) ;see spec above
      SetSerialBuffer 0, 100000  ;Unit Number, Buffer read ahead bytes, for computational stream read pauses, RAM dependent

;-------- variables ----------------

      Dim fnam(64) ;contents of the filename buffer x 2 because we store hex 2-digit bytes
      Dim confbuf(64) ; filename confirmation buffer for end of file - size todo
      fnamlen=0
      fnpnt=1
      x=0  ; screen cursor x  ;debug
      y=4  ; screen cursor y  ;debug
      default_y = y           ;debug
      xmax = 63
      ymax = 24
      termearly = 1
      ytop = 9+(4*8)
      curstop = 4*8

      WLocate 0,0

      ResetTimer

;-------------------------------------------------------------------------------------------
;----------------- Welcome Message     -----------------------------------------------------


      Print "Click LMB at any time to cancel. Now listening on MIDI Port 0, Channel 1:":NPrint""
      Print "--==** Make sure there is enough free RAM: no filesize checking! **==--":NPrint""
      Print "        This window cannot be moved. Clicking will terminate." : NPrint""


;---------------- get filename, which is terminator also, and print it  --------------------
;-------------------------------------------------------------------------------------------
;---------------- first get header bytes ---------------------------------------------------

      a$ = "00"                 ;empty swapbuffers

.loop_header

      r = 0 : t = 0
      b$ = a$                   ;swap/scroll the two observed buffer bytes until the header matches

      c.w = ReadSerial(0)       ;get next word

      If c.w <>-1 Then a$=Right$(Hex$(c.w),2)  ;hex translation of incoming bytes to stringbuffer

      If a$ =  "F0" Then r=1
      If b$ =  "EA" Then t=1
      If t + r = 2 Then Goto header_ok

      If Joyb(0)=1 Goto thatsit
      If Joyb(0)<>1 Goto loop_header

;----------------------------------------------

.header_ok
      NPrint "Transmission in progress. Don`t do anything, don`t insert/remove floppy." ;debug, confirm that header

;-------------- valid stream identified, continue ------------------------------------------
;-------------------------------------------------------------------------------------------

    a = 0

.loop_fnam_build
      ;get the filename max 32 chars terminated with F0(240) EA(234)

      c.w = ReadSerial(0) ;get next word

      t=0 : r=0
      b = a          ;buffer scroll/swap

      If c.w >-1 Then char.b = c.w : fnam(fpnt)= char.b : a=fnam(fpnt): fpnt=fpnt+1
      If fpnt > 31 Goto fnam_error

      If a+256 = 234 Then t=1
      If b+256 = 240 Then r=1
      If t + r = 2 Then Goto fnam_done

      If Joyb(0)=1 Goto thatsit
      If Joyb(0)<>1 Goto loop_fnam_build

.fnam_done
      Print "Incoming file:"
      For e = 0 To fpnt-3: Print Chr$(fnam(e)) : Next e   ;Print recieved filename
      NPrint ""


;------------------------------- header done, now datastream ---------------------------------
;---------------------------------------------------------------------------------------------

      NPrint "Chunks recieved:"

;Skip the nex byte of the datastream (F0 sysex data)

.skiponebyte
      c.w = ReadSerial(0)
      If c.w = -1 Then Goto skiponebyte

;---------------------------------------------------------------------------------------------
;------------------------------ get main body of data ----------------------------------------

;Open File in RAM for Data Output - will be overwritten without asking - todo?

      fileoutname$="" : For e=0 To fpnt-3 : fileoutname$ = fileoutname$ + (Chr$(fnam(e))) : Next e
      out.l = WriteFile(1, "ram:"+(fileoutname$))

;-------------------------------------------------------

.startim
      ResetTimer

      termearly = 0
      baccept = 0
      timeout = 1500
      tt=0

.loop_datachunk  ;----------------------------------------------------------------------------

      c.w = ReadSerial(0)  ;get next word

;unless the word received is -1 : make a byte out of it, write to disk and screen and loop

;################# NO TERMINATOR VERSION ###################

      recon=0

      If c.w >-1 Then recon = 1 : tt = 0 : baccept = baccept +1 
      If recon = 1 Then char.b = c.w : WriteMem 1,&char.b,1
      If c.w < 0 Then tt = tt +1 : If tt > timeout Goto file_recieved
      If baccept = 242 Then baccept = 0 : Gosub byteskips

      If Joyb(0)=1 Goto thatsit
      If Joyb(0)<>1 Goto loop_datachunk



;-------------------------------- close the file --------------------------------------------

.thatsit

      If termearly = 1 Then Goto terminatedpre

.entim
      entime.w = Ticks
      totalsecs$ = Str$(entime.w/50)
      mintime = entime.w/50
      enminit$ = Str$(mintime/60)

      NPrint ""
      NPrint "Transmission time was " + totalsecs$ + " seconds. (Or "+enminit$+" minutes)"
.nothing
      NPrint "Finishing up."

      CloseFile (1)
      VWait 10
      CloseSerial 0
      VWait 10

      NPrint ""
      If termearly=0 Then NPrint "<<< Click LMB to close and exit - File stays in RAM. >>>"
      If termearly=1 Then NPrint "<<< Click LMB to close and exit >>>"

.waitexit
      If Joyb(0)<>1 Goto waitexit

.catch22
      VWait
      If Joyb(0)<>0 Then Goto catch22

End

;=========================================================================================================
;=========================================================================================================

.terminatedpre
      NPrint ""
      NPrint "   --- Transmission was terminated prematurely. Nothing happened --- " : NPrint ""
      Goto nothing

;----------------------------------------------------------------------------------

.byteskips ;instead of filtering the sysex bytes, we just skip them

      byteskipcount=1

.byteskiploop

      c.w = ReadSerial(0)
      If c.w = -1 Then Goto byteskiploop
        byteskipcount = byteskipcount - 1

      If byteskipcount > 0 Then Goto byteskiploop
          If x < 63 Then Print"#" ; Print "*SKIP*"
          If x = 63 Then Print"*"
          Gosub movectransm

     Return


;-------------------------------------------------------------------------------------

.file_recieved

      x=0 : y=default_y

      WBox 4,ytop+2,595,236,0
      WLocate x,ytop
      NPrint "********************************************************"
      NPrint ""
      NPrint " File RAM:"+fileoutname$+" complete."
      NPrint ""
      NPrint "      >>> Make sure to check file integrity! <<<"
      NPrint "             There is no error correction!"
      NPrint ""
      NPrint "********************************************************"
      Goto thatsit

;----------------------------------------------------------------------------------

.fnam_error
      x=0 : y=default_y
      WBox 4,ytop+2,595,236,0
      WLocate x,ytop
      NPrint "Filename did not terminate. I don`t feel so good. Exiting."
      Goto thatsit

;------------------------------ no more guessing -----------------------------------

.directdump

.loop_directdump
      c.w = ReadSerial(0)  ;get next word

;unless the word received is -1 : make a byte out of it, write to disk and screen and loop
      If c.w >-1 Print Right$(Hex$(c.w),2)+" " : Gosub movectransm
      If Joyb(0)<>1 Goto loop_directdump

      Goto thatsit

;-----------------------------  i`ve got all the answers -----------------------------

.directprint

      If c.w >-1 Print Right$(Hex$(c.w),2)+" ": Gosub movecursor
      Return

;---------------------------- cursor move + reset -----------------------------------

.movecursor

     x = x + 1
     If x > xmax Then x = 0 : NPrint "" : y=y+1 : If y>ymax Then y=default_y : WBox 4,ytop,595,236,0 : WLocate x,ytop

     Return

;---------------------------- cursor move + reset -----------------------------------

.movectransm

     x = x + 1
     If x > xmax Then x = 0 : NPrint "" : y=y+1 : If y>ymax Then y=default_y+2 : WBox 4,ytop+18,595,236,0 : WLocate x,ytop+7

     Return


;==================================================================================
;#EOF
